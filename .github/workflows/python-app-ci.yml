# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        python-version: 3.12.3
        enable-cache: true
        ignore-nothing-to-cache: true
    - name: Run ruff
      run: uv run ruff check .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .venv
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .venv
    - name: Test with pytest and coverage with pytest-cov
      run: |
        uv run pytest --cov
    - name: Pytest coverage html report
      run: |
        uv run pytest --cov-report html --cov
    - uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov
    - name: MyPy
      run: |
        uv run mypy --disallow-untyped-calls --disallow-untyped-defs --disallow-incomplete-defs src
    - name: Install coveralls-python
      run: uv run pip install coveralls
    - name: Run coveralls
      run: coveralls --service=github-actions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  auto-merge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Decide if auto-merge should run
        id: check
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_USER="${{ github.event.pull_request.user.login }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          OWNER="${{ github.repository_owner }}"
          ACTOR="${{ github.actor }}"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          if [[ "$PR_TITLE" == Bump\ version\ to\ v* ]]; then
            echo "title_check=✅" >> $GITHUB_OUTPUT
          else
            echo "title_check=❌" >> $GITHUB_OUTPUT
          fi
          if [[ "$PR_USER" == "github-actions[bot]" || "$PR_USER" == "$OWNER" ]]; then
            echo "user_check=✅" >> $GITHUB_OUTPUT
          else
            echo "user_check=❌" >> $GITHUB_OUTPUT
          fi
          if [[ "$PR_TITLE" == Bump\ version\ to\ v* ]] && ([[ "$PR_USER" == "github-actions[bot]" ]] || [[ "$PR_USER" == "$OWNER" ]]); then
            echo "allowed=true" >> $GITHUB_OUTPUT
            echo "reason=All checks passed" >> $GITHUB_OUTPUT
            echo "✅ Auto-merge allowed for PR #$PR_NUMBER" >&2
          else
            echo "allowed=false" >> $GITHUB_OUTPUT
            echo "reason=pr.user.login: $PR_USER $( [[ "$PR_USER" == "github-actions[bot]" || "$PR_USER" == "$OWNER" ]] && echo '✅' || echo '❌' ); pr.title: $PR_TITLE $( [[ "$PR_TITLE" == Bump\ version\ to\ v* ]] && echo '✅' || echo '❌' )" >> $GITHUB_OUTPUT
            echo "ℹ️ Skipping auto-merge for PR #$PR_NUMBER" >&2
            exit 0
          fi
      - name: Validate PR is a clean version bump
        id: validate_bump
        run: |
          set -e
          PR_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current PR branch: $PR_BRANCH"
          git fetch origin master
          git checkout origin/master -b _tmp_master
          uv version --bump patch
          git add pyproject.toml uv.lock
          git commit -m "temp version bump" || true
          git checkout "$PR_BRANCH"
          git diff --ignore-space-at-eol --ignore-blank-lines _tmp_master -- pyproject.toml uv.lock > /tmp/compare.diff || true
          if [ -s /tmp/compare.diff ]; then
            echo "❌ PR branch does not match a clean version bump from master."
            cat /tmp/compare.diff
            exit 1
          else
            echo "✅ PR branch matches a clean version bump from master."
          fi
          git branch -D _tmp_master
      - name: Auto-merge PR
        if: steps.check.outputs.allowed == 'true'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.check.outputs.pr_number }}
        with:
          github-token: ${{ secrets.AUTO_RELEASE_TOKEN }}
          script: |
            const pr_number = Number(process.env.PR_NUMBER);
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
              merge_method: 'squash'
            });
            console.log(`✅ Auto-merged PR #${pr_number}`);
