# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    #----------------------------------------------
    #       check-out repo
    #----------------------------------------------
    - name: Check out repository
      uses: actions/checkout@v4
    #----------------------------------------------
    #       install and configure uv
    #----------------------------------------------
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        python-version: 3.12.3
        enable-cache: true
        ignore-nothing-to-cache: true
    #----------------------------------------------
    #              run test suite
    #----------------------------------------------
    - name: Run ruff
      run: uv run ruff check .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .venv
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .venv
    - name: Test with pytest and coverage with pytest-cov
      run: |
        uv run pytest --cov
    - name: Pytest coverage html report
      run: |
        uv run pytest --cov-report html --cov
    - uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov
    - name: MyPy
      run: |
        uv run mypy --disallow-untyped-calls --disallow-untyped-defs --disallow-incomplete-defs src
    - name: Install coveralls-python
      run: uv run pip install coveralls
    - name: Run coveralls
      run: coveralls --service=github-actions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-version-upgrade:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch master branch
        run: git fetch origin master:refs/remotes/origin/master
      - name: Check version bump in pyproject.toml
        run: |
          set -e
          VERSION_MASTER=$(git show origin/master:pyproject.toml | grep '^version' | head -1 | cut -d '"' -f2)
          VERSION_HEAD=$(grep '^version' pyproject.toml | head -1 | cut -d '"' -f2)
          echo "Master version: $VERSION_MASTER"
          echo "Current version: $VERSION_HEAD"
          if [ "$VERSION_MASTER" = "$VERSION_HEAD" ]; then
            echo "Error: pyproject.toml version has not been updated!"
            exit 1
          fi
